'use strict';

const _ = require('underscore');
const debug = require('debug')('bot');
const SocksClient = require('socks5-https-client/lib/Agent');
const Telegraf = require('telegraf');
const Markup = require('telegraf/markup');
const Session = require('telegraf/session');
const emoji = require('node-emoji');

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
 */
debug('something working!!!1');
debug(process.env.BOT_TOKEN);

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Å–∏ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Telegram
 */
const SocksAgent = new SocksClient({
    socksHost: process.env.PROXY_IP,
    socksPort: process.env.PROXY_PORT,
    socksUsername: process.env.PROXY_USERNAME,
    socksPassword: process.env.PROXY_PASSWORD
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf
 * @param telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
 */
const bot = new Telegraf(process.env.BOT_TOKEN,
{
    telegram: {
        agent: SocksAgent
    }
});

bot.use(Session());

bot.use((ctx, next) => {
    if(ctx.message) debug(ctx.message);
    const start = new Date();
    return next(ctx).then((botAnswer) => {
        if(botAnswer) {
            const ms = new Date() - start;
            debug('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ %sms', ms);
            //debug(botAnswer);
            debug('–û—Ç–≤–µ—Ç "%s" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.', botAnswer.text);
        }
    });
});

function declOfNum(number, titles) {  
    let cases = [2, 0, 1, 1, 1, 2];  
    return titles[ (number%100>4 && number%100<20)? 2 : cases[(number%10<5)?number%10:5] ];  
}

bot.start((ctx) => {
    return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([[
        Markup.callbackButton('–ú–æ–ª–æ–¥–µ—Ü', 'good_boy'),
        Markup.callbackButton('–ó–∞–ø–∏—Å—å', 'to_write')
    ],[
        Markup.callbackButton('–ü—Ä–∏–Ω—è—Ç—å –ø–∏—Å—å–º–æ', 'to_send'),
    ]]).extra());
});

bot.action('good_boy', (ctx) => { 
    return ctx.reply('–°–ø–∞—Å–∏–±–æ! ‚ò∫Ô∏è');
});

bot.action('to_write', (ctx) => {
    return ctx.reply('–ó–∞–ø–∏—Å—ã–≤–∞—é ü§î');
});

bot.action('to_letter_open', (ctx) => {
    ctx.session.openLetter = ctx.session.openLetter || 0;
    debug(ctx.session.openLetter);
    return ctx.reply(!ctx.session.openLetter ? (ctx.session.openLetter++, emoji.random().emoji) : '–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ! –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ.');
});

bot.action('to_send', (ctx) => {
    ctx.session.openLetter = 0;
    return ctx.reply('–í–∞–º –ø–∏—Å—å–º–æ ‚úâÔ∏è', 
    Markup.inlineKeyboard([
        Markup.callbackButton('–û—Ç–∫—Ä—ã—Ç—å', 'to_letter_open')
    ]).extra());
});

bot.on('sticker', (ctx) => ctx.reply('üëç'));

bot.hears(/^–∑–∞–ø–∏—Å—å/i, (ctx) => ctx.reply('–ó–∞–ø–∏—Å—ã–≤–∞—é ü§î'));

bot.hears(/^–º–æ–ª–æ–¥–µ—Ü(!|1|–æ–¥–∏–Ω|\))*$/i, (ctx) => {
    let ep;
    if (ctx.message && ctx.message.text.indexOf('!')) {
        ep = ctx.message.text.split('!').length - 1;
    }
    debug(ep);

    let message = `${ep} ${declOfNum(ep, ['–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π', '–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö', '–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö'])} ${declOfNum(ep, ['–∑–Ω–∞–∫', '–∑–Ω–∞–∫–∞', '–∑–Ω–∞–∫–æ–≤'])}`;
    let answer = '–°–ø–∞—Å–∏–±–æ! ‚ò∫Ô∏è ';
    if (ep >= 1 && ep <= 4){
        answer += `–í—ã –ø–æ—Ö–≤–∞–ª–∏–ª–∏ –Ω–∞ ${message}!`;
    } 
    if (ep >= 5 && ep <= 14){
        answer += `–í—ã –º–Ω–µ –ª—å—Å—Ç–∏—Ç–µ ‚Äî ${message}!`;
    } 
    if (ep > 15) {
        answer += `–í–∞—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –Ω–µ—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.`;
    }

    return ctx.reply(answer);
});

bot.hears(/^üéÖüéÑ(üéÅ)*$/, ctx => {
    ctx.session.holidayPresents = 0;

    let presents;
    if (ctx.message.text.indexOf('üéÅ')) {
        presents = ctx.session.holidayPresents = ctx.message.text.split('üéÅ').length - 1;
    }
    debug(presents);

    let holidayGreeting = [`–•–æ-—Ö–æ-—Ö–æ! –î–µ–¥ –ú–æ—Ä–æ–∑ –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ –≤–µ—Å—ë–ª–æ–≥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –∏ –†–æ–∂–¥–µ—Å—Ç–≤–∞, –∏ –∫–ª–∞–¥–µ—Ç –ø–æ–¥ —Ç–≤–æ—é —ë–ª–∫—É ${presents} ${declOfNum(presents, ['–ø–æ–¥–∞—Ä–æ–∫', '–ø–æ–¥–∞—Ä–∫–∞', '–ø–æ–¥–∞—Ä–∫–æ–≤'])}! ‚ùÑÔ∏è‚õÑÔ∏è`,
    Markup.inlineKeyboard([
        [Markup.callbackButton('–û—Ç–∫—Ä—ã—Ç—å –æ–¥–∏–Ω', 'open_one_present')],
        [Markup.callbackButton('–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ', 'open_all_presents')]
    ]).extra()];

    let tooMuchPresents = ['–ü–æ–¥ —ë–ª–∫–æ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'];

    return ctx.reply.apply(null, (presents > 9 ? tooMuchPresents : holidayGreeting));
});

function getRandomPresents(number) {
    let presents = ['üëº', 'üç™', 'üåü', '‚ùÑÔ∏è', '‚òÉÔ∏è', '‚õÑÔ∏è', 'üéÑ', 'üîî', 'üß¶'];
    return _.sample(presents, number);
}

bot.action('open_one_present', ctx => {
    let presents = getRandomPresents(1);
    
    return ctx.reply(ctx.session.holidayPresents ? (ctx.session.holidayPresents--, presents.join('')) : '–ü–æ–¥–∞—Ä–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.',
    Markup.inlineKeyboard([
        Markup.callbackButton('–û—Ç–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–∏–Ω', 'open_one_present')
    ]).extra());
});

bot.action('open_all_presents', ctx => {
    let presents = getRandomPresents(ctx.session.holidayPresents);
    debug('–û—Å—Ç–∞–ª–æ—Å—å %s', presents.length);
    
    return ctx.reply(ctx.session.holidayPresents ? (ctx.session.holidayPresents = 0, presents.join('')) : '–ü–æ–¥–∞—Ä–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.');
});

bot.hears('üêà', ctx => {
    return ctx.reply('–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä—ã–≥–Ω—É–ª –≤–∞—à –∫–æ—Ç!');
});

bot.startPolling();
